apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: logscale-otel-k8s
  namespace: ${logscale_namespace}
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: raw
      version: "2.0.0"
      sourceRef:
        kind: HelmRepository
        name: bedag
        namespace: flux-repos
      interval: 5m
  releaseName: logscale-otel-k8s
  targetNamespace: ${logscale_namespace}
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  test:
    enable: false
  values:
    resources:
      - apiVersion: kafka.strimzi.io/v1beta2
        kind: KafkaUser
        metadata:
          name: otel-${logscale_namespace}
          namespace: shared-kafka
          labels:
            strimzi.io/cluster: shared
        spec:
          authentication:
            type: scram-sha-512
          authorization:
            type: simple
            acls:
              # Example ACL rules for consuming from my-topic using consumer group my-group
              - resource:
                  type: cluster
                operations:
                  - Describe
              - resource:
                  type: topic
                  name: otlp_
                  patternType: prefix
                operations:
                  - Describe
                  - DescribeConfigs
                  - Read
                  - Write
                host: "*"
      - apiVersion: access.strimzi.io/v1alpha1
        kind: KafkaAccess
        metadata:
          name: otel-${logscale_namespace}
          namespace: shared-kafka
        spec:
          kafka:
            name: shared
            namespace: shared-kafka
            listener: tls
          user:
            kind: KafkaUser
            apiGroup: kafka.strimzi.io
            name: otel-${logscale_namespace}
            namespace: shared-kafka
      - apiVersion: opentelemetry.io/v1beta1
        kind: OpenTelemetryCollector
        metadata:
          name: otel-${logscale_namespace}
        spec:
          mode: Deployment
          priorityClassName: tenant-low
          replicas: 1
          env:
            - name: LOGSCALE_INGEST_URI
              value: http://logscale-ingest:8080
            - name: LOGSCALE_INGEST_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ingest-token-ref-otel-k8s
                  key: token
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                secretKeyRef:
                  name: otel-producer
                  key: bootstrap.servers
            - name: KAFKA_SASL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: otel-producer
                  key: username
            - name: KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: otel-producer
                  key: password
            - name: KAFKA_SASL_MECHANISM
              valueFrom:
                secretKeyRef:
                  name: otel-producer
                  key: sasl.mechanism

          volumes:
            - name: kafka-trust-store
              configMap:
                # Provide the name of the ConfigMap containing the files you want
                # to add to the container
                name: cluster-trust-bundle
                items:
                  - key: cluster-bundle.pem
                    path: bundle.pem
          volumeMounts:
            - name: kafka-trust-store
              mountPath: /mnt/kafka/truststore
              readOnly: true
          config:
            receivers:
              kafka/logs:
                topic: otlp_logs
                protocol_version: 3.8.0
                brokers:
                  - $${KAFKA_BOOTSTRAP_SERVERS}
                # resolve_canonical_bootstrap_servers_only: true
                group_id: $${logscale_namespace}
                client_id: otel-recv
                initial_offset: earliest
                auth:
                  sasl:
                    username: $${KAFKA_SASL_USERNAME}
                    password: $${KAFKA_SASL_PASSWORD}
                    mechanism: $${KAFKA_SASL_MECHANISM}
                    version: 1
                  tls:
                    ca_file: /mnt/kafka/truststore/bundle.pem
                    insecure_skip_verify: false
                producer:
                  compression: lz4
                  flush_max_messages: 1000
            processors:
              memory_limiter:
                check_interval: 1s
                limit_percentage: 75
                spike_limit_percentage: 15
              batch:
                send_batch_size: 1000
                timeout: 5s

            exporters:
              debug: {}
              otlphttp:
                endpoint: $${LOGSCALE_INGEST_URI}
                tls:
                  insecure: true
                timeout: 20s
                sending_queue:
                  enabled: true
                  num_consumers: 2
                  queue_size: 10
                retry_on_failure:
                  enabled: true
                  initial_interval: 10s
                  randomization_factor: 0.7
                  multiplier: 1.3
                  max_interval: 60s
                  max_elapsed_time: 10m
                  headers:
                    Authorization: Bearer $${LOGSCALE_INGEST_TOKEN}
                  compression: gzip
            service:
              pipelines:
                logs:
                  receivers: [kafka/logs]
                  processors: [memory_limiter, batch]
                  exporters: [debug]
